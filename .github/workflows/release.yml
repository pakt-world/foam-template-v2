name: Production Web Deployment

on:
    push:
        tags:
            - "**"

env:
    ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
    AWS_KEY: ${{ secrets.AWS_KEY }}
    AWS_SECRET: ${{ secrets.AWS_SECRET }}
    AWS_KEY_LIVE: ${{ secrets.AWS_KEY_LIVE }}
    AWS_SECRET_LIVE: ${{ secrets.AWS_SECRET_LIVE }}

jobs:
    build-dev:
        name: Build and Push Image to ECR
        runs-on: ubuntu-latest

        steps:
            - name: Check out code
              uses: actions/checkout@v2

            - name: Set output
              id: vars
              run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

            - name: Check output
              env:
                  RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
              run: |
                  echo $RELEASE_VERSION
                  echo ${{ steps.vars.outputs.tag }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_KEY }}
                  aws-secret-access-key: ${{ env.AWS_SECRET }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build Image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
                  RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
              run: |
                  docker build --build-arg PORT=3000 -f ./.deploy/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_VERSION .
                  docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest

            - name: Push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
                  RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
              run: |
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_VERSION
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    delete-untagged-images-dev:
        runs-on: ubuntu-latest
        needs: build-dev

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Configure AWS credentials
              run: |
                  aws configure set aws_access_key_id ${{ env.AWS_KEY }}
                  aws configure set aws_secret_access_key ${{ env.AWS_SECRET }}
                  aws configure set region us-east-1

            - name: Delete untagged images
              run: |
                  # Get the repository URI
                  repository_uri=$(aws ecr describe-repositories --repository-names ${{env.ECR_REPOSITORY}} --query 'repositories[0].repositoryUri' --output text)

                  # List images with no tag and filter the imageDigest
                  untagged_images=$(aws ecr list-images --repository-name ${{env.ECR_REPOSITORY}} --filter tagStatus=UNTAGGED --query 'imageIds[*].imageDigest' --output text)

                  # Delete each untagged image
                  for digest in $untagged_images; do
                    aws ecr batch-delete-image --repository-name ${{env.ECR_REPOSITORY}} --image-ids imageDigest=$digest
                  done

    build-live:
        needs: build-dev
        name: Build and Push Image to ECR
        runs-on: ubuntu-latest

        steps:
            - name: Check out code
              uses: actions/checkout@v2

            - name: Set output
              id: vars
              run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

            - name: Check output
              env:
                  RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
              run: |
                  echo $RELEASE_VERSION
                  echo ${{ steps.vars.outputs.tag }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_KEY_LIVE }}
                  aws-secret-access-key: ${{ env.AWS_SECRET_LIVE }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build Image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
                  RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
              run: |
                  docker build --build-arg PORT=3000 -f ./.deploy/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_VERSION .
                  docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest

            - name: Push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
                  RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
              run: |
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_VERSION
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    delete-untagged-images-live:
        runs-on: ubuntu-latest
        needs: build-live

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Configure AWS credentials
              run: |
                  aws configure set aws_access_key_id ${{ env.AWS_KEY_LIVE }}
                  aws configure set aws_secret_access_key ${{ env.AWS_SECRET_LIVE }}
                  aws configure set region us-east-1

            - name: Delete untagged images
              run: |
                  # Get the repository URI
                  repository_uri=$(aws ecr describe-repositories --repository-names ${{env.ECR_REPOSITORY}} --query 'repositories[0].repositoryUri' --output text)

                  # List images with no tag and filter the imageDigest
                  untagged_images=$(aws ecr list-images --repository-name ${{env.ECR_REPOSITORY}} --filter tagStatus=UNTAGGED --query 'imageIds[*].imageDigest' --output text)

                  # Delete each untagged image
                  for digest in $untagged_images; do
                    aws ecr batch-delete-image --repository-name ${{env.ECR_REPOSITORY}} --image-ids imageDigest=$digest
                  done
